import type { getEstimatedDifficulties } from "atcoder-problems-api/information";
import difficultyCircle from "./components/difficultyCircle";
import css from "./style/_custom.scss";
import {
  getElementOfProblemStatus,
  getElementsColorizable
} from "./utils/getElementsColorizable";
import isContestOver from "./utils/isContestOver";
import { taskID } from "./utils/parser";
import { clipDifficulty, getRatingColorClass } from "./utils/problemsIndex";

(async () => {
  // „Ç≥„É≥„ÉÜ„Çπ„ÉàÁµÇ‰∫ÜÂâç„ÅØ‰∏çË¶Å„Å™„ÅÆ„ÅßÁÑ°ÂäπÂåñ„Åô„Çã
  if (!isContestOver()) return;

  // FIXME: „ÉÄ„Éº„ÇØ„ÉÜ„Éº„ÉûÂØæÂøú
  GM_addStyle(css);

  // Èõ£ÊòìÂ∫¶ÂèñÂæó
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  const problemModels = await getEstimatedDifficulties();

  // Ëâ≤‰ªò„ÅëÂØæË±°„ÅÆË¶ÅÁ¥†„ÅÆÈÖçÂàó„ÇíÂèñÂæó„Åô„Çã
  // Èõ£ÊòìÂ∫¶„ÅåÁÑ°„ÅÑ„ÇÇ„ÅÆ„ÇíÈô§„Åè
  const elementsColorizable = getElementsColorizable().filter(
    (element) => element.taskID in problemModels
  );

  // ÂïèÈ°å„Çπ„ÉÜ„Éº„Çø„ÇπÔºàÂÄãÂà•„ÅÆÂïèÈ°å„Éö„Éº„Ç∏„ÅÆÂÆüË°åÊôÇÈñìÂà∂Èôê„Å®„É°„É¢„É™Âà∂Èôê„ÅåÊõ∏„Åã„Çå„ÅüÈÉ®ÂàÜÔºâ„ÇíÂèñÂæó„Åô„Çã
  const elementProblemStatus = getElementOfProblemStatus();

  /**
   * Ëâ≤‰ªò„ÅëÂá¶ÁêÜ„ÇíÂÆüË°å„Åô„Çã
   */
  const colorizeElement = () => {
    // ÂïèÈ°åË¶ãÂá∫„Åó„ÄÅÂïèÈ°å„É™„É≥„ÇØ„ÇíËâ≤‰ªò„Åë
    elementsColorizable.forEach((element) => {
      const model = problemModels[element.taskID];
      // Èõ£ÊòìÂ∫¶„ÅåUnavailable„Å™„Çâ„Å∞difficulty„Éó„É≠„Éë„ÉÜ„Ç£„ÅåÁÑ°„ÅÑ
      // difficulty„ÅÆÂÄ§„ÇíNaN„Å®„Åô„Çã
      const difficulty = clipDifficulty(model.difficulty ?? NaN);
      console.log("model :>> ", model);
      // Ëâ≤‰ªò„Åë
      if (!Number.isNaN(difficulty)) {
        const color = getRatingColorClass(difficulty);
        // eslint-disable-next-line no-param-reassign
        element.element.classList.add(color);
      } else {
        element.element.classList.add("difficulty-unavailable");
      }

      // üß™ËøΩÂä†
      if (model.is_experimental) {
        element.element.insertAdjacentText("afterbegin", "üß™");
      }

      // ‚óíÈõ£ÊòìÂ∫¶ÂÜÜËøΩÂä†
      element.element.insertAdjacentHTML(
        "afterbegin",
        difficultyCircle(difficulty, element.big)
      );
    });

    // bootstrap3„ÅÆtooltip„ÇíÊúâÂäπÂåñ Èõ£ÊòìÂ∫¶ÂÜÜ„ÅÆÂÄ§„ÇíË°®Á§∫„Åô„Çãtooltip
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call, no-undef
    $('[data-toggle="tooltip"]').tooltip();

    // ÂÄãÂà•„ÅÆÂïèÈ°å„Éö„Éº„Ç∏„ÅÆ„Å®„Åì„Çç„Å´Èõ£ÊòìÂ∫¶Á≠âÊÉÖÂ†±„ÇíËøΩÂä†
    if (elementProblemStatus) {
      // Èõ£ÊòìÂ∫¶Êé®ÂÆö„ÅÆÂØæË±°Â§ñ„Å™„Çâ„ÄÅ„Åì„ÅÆÂÄ§„ÅØundefined
      const model = problemModels[taskID];

      // Èõ£ÊòìÂ∫¶„ÅåUnavailable„ÅÆ„Å®„Åç„ÅØdifficulty„ÅÆÂÄ§„ÇíNaN„Å®„Åô„Çã
      // Èõ£ÊòìÂ∫¶„ÅåUnavailable„Å™„Çâ„Å∞difficulty„Éó„É≠„Éë„ÉÜ„Ç£„ÅåÁÑ°„ÅÑ
      const difficulty = clipDifficulty(model?.difficulty ?? NaN);
      console.log("model :>> ", model);

      // Ëâ≤‰ªò„Åë
      let className = "";
      if (difficulty) {
        className = getRatingColorClass(difficulty);
      } else if (model) {
        className = "difficulty-unavailable";
      } else {
        className = "";
      }

      // Difficulty„ÅÆÂÄ§Ë®≠ÂÆö
      let value = "";
      if (difficulty) {
        value = difficulty.toString();
      } else if (model) {
        value = "Unavailable";
      } else {
        value = "None";
      }

      elementProblemStatus.insertAdjacentHTML(
        "beforeend",
        ` / Difficulty:
        <span style='font-weight: bold;' class="${className}">${value}</span>`
      );
    }
  };

  // TODO: Ëá™ÂàÜ„ÅÆÂæóÁÇπÁä∂Ê≥Å„Éö„Éº„Ç∏ÂØæÂøú

  // Ëâ≤‰ªò„ÅëÂÆüË°å
  // TODO: „Éç„Çø„Éê„É¨Èò≤Ê≠¢Ê©üËÉΩ„ÅåÊúâÂäπ„Å™„ÇâÂæå„ÅßÂÆüË°å„Åô„Çã
  colorizeElement();

  console.log("elementsColorizable :>> ", elementsColorizable);
})().catch((error) => {
  // eslint-disable-next-line no-console
  console.error("[AtCoderDifficultyDisplay]", error);
});
